#!/bin/bash

# username     - green
# hostname     - green
# error status - green
# VCS status   - variable
# pathname     - purple
#
# username@hostname [?] (VCS) /absolute/path/to/pwd
# $

# These are not all the combinations available, but it should still be
# enough to support the desired combinations
black="\[\033[0;30m\]"
red="\[\033[0;31m\]"
green="\[\033[0;32m\]"
yellow="\[\033[0;33m\]"
blue="\[\033[0;34m\]"
purple="\[\033[0;35m\]"
cyan="\[\033[0;36m\]"
light_gray="\[\033[0;37m\]"

dark_gray="\[\033[1;30m\]"
light_red="\[\033[1;31m\]"
light_green="\[\033[1;32m\]"
light_yellow="\[\033[1;33m\]"
light_blue="\[\033[1;34m\]"
light_purple="\[\033[1;35m\]"
light_cyan="\[\033[1;36m\]"
white="\[\033[1;37m\]"

no_color="\[\033[0m\]"

# Define the color for things like @, [, ( in one place
sep_color=$dark_gray

function prompt_command() {

    # Determine color encoding for the command status - this has to be the
    # first line in the function to catch the command status
    local cmd_status="$?"
    local cmd_color=""
    if [ $cmd_status != 0 ]; then
        cmd_color=$light_red
    else
        cmd_color=$green
    fi
    local cmd_string=$sep_color[$cmd_color$cmd_status$sep_color]

    # if a git repo, set the string for color, branch name, and status
    if ! [[ `git status -unormal 2>&1` =~ Not\ a\ git\ repo ]]; then
        local vcs_string=$(git_prompt)
    elif [[ `svn info $PWD 2>&1` =~ 0 ]]; then
        local vcs_string=$(svn_prompt)
    else
        local vcs_string=""
    fi

    # Determine color and formatting for the hostname and user
    local host_string="$cyan\u$sep_color@$cyan\h"

    # Resolve all symbolic lengths, regardless of how deep it goes
    local path_string=$light_cyan`pwd -P`

    PS1="$host_string $cmd_string $vcs_string $path_string\n$sep_color\$ $no_color"
    export PS1
}

function git_prompt() {
    # Returns a formatted and colorized string containing branch name and status
    local git_status="`git status -unormal 2>&1`"
    if [[ "$git_status" =~ nothing\ to\ commit ]]; then
	local git_color=$green
    elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
	local git_color=$red
    else
	local git_color=$yellow
    fi
    if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
	branch=${BASH_REMATCH[1]}
    else
	branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null || echo HEAD`)"
    fi
    echo -n "$sep_color($git_color$branch$sep_color)"
}

function svn_prompt() {
    # Try using a combination of `svn info` and `svn status` with some regex to
    # determine if there are untracked files in the directory or whether there
    # are commits that are ahead of the latest revision
    local svn_color=$green
    local svn_string="svn"
    echo -n "$sep_color($svn_color$svn_string$sep_color)"
}

export PROMPT_COMMAND=prompt_command
